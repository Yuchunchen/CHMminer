<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack"/>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="import snap%%00010import pandas as pd%%00010from pandas import DataFrame%%00010%%00010#the_input_table = input_table.copy()%%00010%%00010theGraph = snap.TUNGraph.New()%%00010theItemStrToNr={}%%00010theItemNrToStr={}%%00010RuleChecker={}      #用來檢查rule是否已經存在%%00010colEdgeSrcID=[]%%00010colEdgeTargetID=[]%%00010colEdgeSrcLabel=[]%%00010colEdgeTargetLabel=[]%%00010colEdgeSupport=[]%%00010colEdgeSupportPercent=[]%%00010colEdgeLift=[]%%00010colNodeID=[]%%00010colNodeLabel=[]%%00010colNodeSupport=[]%%00010colNodeSupportPercent=[]%%00010%%00010i=0%%00010z=0%%00010for row in input_table.itertuples():%%00010    if getattr(row, 'RuleLift') &lt;= 1:%%00010        continue%%00010    srcItem=getattr(row, 'Consequent')%%00010%%00010    targetItemset=getattr(row, 'Antecedent')%%00010    targetItem=list(targetItemset)[0]%%00010    (srcItemNr, targetItemNr) = (-1, -1)%%00010    if theItemStrToNr.has_key(srcItem):%%00010        srcItemNr=theItemStrToNr[srcItem]   #轉換成數字%%00010    else:%%00010        srcItemNr=i%%00010        theItemStrToNr[srcItem]=i%%00010        theItemNrToStr[i]=srcItem%%00010        theGraph.AddNode(srcItemNr)%%00010        colNodeID.append(srcItemNr)%%00010        colNodeLabel.append(srcItem)%%00010        colNodeSupport.append(getattr(row,'AbsoluteHeadItemSupport'))%%00010        colNodeSupportPercent.append(getattr(row,'_11'))%%00010        i+=1%%00010    if theItemStrToNr.has_key(targetItem):%%00010        targetItemNr=theItemStrToNr[targetItem] #轉換成數字%%00010    else:%%00010        targetItemNr=i%%00010        theItemStrToNr[targetItem]=i %%00010        theItemNrToStr[i]=targetItem%%00010        theGraph.AddNode(targetItemNr)%%00010        colNodeID.append(targetItemNr)%%00010        colNodeLabel.append(targetItem)%%00010        colNodeSupport.append(getattr(row,'AbsoluteBodySetSupport'))%%00010        colNodeSupportPercent.append(getattr(row,'_7'))%%00010        i+=1%%00010    if not RuleChecker.has_key( &quot;{0}x{1}&quot;.format(srcItemNr, targetItemNr) ):%%00010       RuleChecker[&quot;{0}x{1}&quot;.format(srcItemNr, targetItemNr) ] =1 %%00010       RuleChecker[&quot;{0}x{1}&quot;.format(targetItemNr, srcItemNr) ] =1 %%00010       theGraph.AddEdge(srcItemNr, targetItemNr)%%00010       colEdgeSrcID.append(srcItemNr)%%00010       colEdgeTargetID.append(targetItemNr)%%00010       colEdgeSrcLabel.append(srcItem)%%00010       colEdgeTargetLabel.append(targetItem)%%00010       colEdgeSupport.append(getattr(row,'ItemSetSupport'))%%00010       colEdgeSupportPercent.append(getattr(row,'_4'))%%00010       colEdgeLift.append(getattr(row,'RuleLift'))%%00010    z+=1%%00010%%00010print(&quot;Number of association rules processed: {0}&quot;.format(z))%%00010print(&quot;Number of Node is: {0}&quot;.format(len(colNodeID)))%%00010colNodeGroup=[-1] * len(colNodeID)%%00010colNodeCheck=[-1] * len(colNodeID)%%00010    %%00010communityVector = snap.TCnComV()%%00010modularity = snap.CommunityCNM(theGraph, communityVector)%%00010print(&quot;Number of community is: {0}&quot;.format(len(communityVector)))%%00010groupNo=0%%00010for nodeList in communityVector:%%00010    for NI in nodeList:%%00010        colNodeGroup[NI]=&quot;G{0}&quot;.format(groupNo)%%00010        colNodeCheck[NI]=theItemNrToStr[NI]%%00010    groupNo+=1%%00010%%00010%%00010output_table_1 = DataFrame( {'source'         :  colEdgeSrcID, %%00010                             'target'         :  colEdgeTargetID,%%00010                             'sourceLabel'      :  colEdgeSrcLabel,%%00010                             'targetLabel'      :  colEdgeTargetLabel,%%00010                             'itemsetSupport' :  colEdgeSupport,%%00010                             'itemsetSupportPercent' : colEdgeSupportPercent,%%00010                             'itemsetLift': colEdgeLift})%%00010output_table_2 = DataFrame( {'id'          : colNodeID,%%00010                             'name'          : colNodeID, %%00010                             'nodeLabel'   : colNodeLabel,%%00010                             'nodeSupport' : colNodeSupport,%%00010                             'nodeSupportPercent':  colNodeSupportPercent, %%00010                             'myGroup'       : colNodeGroup%%00010                             #,'check'       : colNodeCheck   #--&gt; for debug%%00010                             })%%00010%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="[STEP 2]%%00013%%00010網路分析產生%%00013%%00010Table1: Edge%%00013%%00010Table2: Node"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="787"/>
<entry key="y-coordinate" type="xint" value="399"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="60"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python.nodes.script1in2out.PythonScript1In2OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (1⇒2)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.4.0.v201707041256"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.4.0.v201707041256"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (1⇒2)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 15, Cols: 7"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
<config key="port_2">
<entry key="index" type="xint" value="2"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 17, Cols: 6"/>
<entry key="port_dir_location" type="xstring" value="port_2"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
