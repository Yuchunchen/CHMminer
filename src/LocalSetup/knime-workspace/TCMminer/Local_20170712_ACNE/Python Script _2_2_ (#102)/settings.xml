<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="settings.xml">
<entry key="node_file" type="xstring" value="settings.xml"/>
<config key="flow_stack">
<config key="Variable_0">
<entry key="type" type="xstring" value="variable"/>
<entry key="name" type="xstring" value="CSS"/>
<entry key="class" type="xstring" value="STRING"/>
<entry key="value" type="xstring" value="%%00010body {font-family: Arial, &quot;文泉驛正黑&quot;, &quot;WenQuanYi Zen Hei&quot;, &quot;儷黑 Pro&quot;, &quot;LiHei Pro&quot;, &quot;微軟正黑體&quot;, &quot;Microsoft JhengHei&quot;, &quot;標楷體&quot;, DFKai-SB, sans-serif;}%%00010.typeName {font-size: 32px;text-align: right;%%00009word-break: font-weight: border;}%%00010.col1 {width: 130px; border-right-width: thick;border-right-color: darkgrey;border-right-style: dotted;text-align: right;vertical-align: middle;}%%00010.col2 {width: auto;display: grid;vertical-align: bottom;}%%00010.legendCircle {font-size: 60px; %%00009line-height: 40px;}%%00010.legendText {font-size: 24px; color: gray;}%%00010.legendBox {font-size: 60px; %%00009line-height: 40px;}%%00010.qrcode { absolute; top: 20 px; right: 20 px; } %%00010.header1 { font-weight: bold; font-size: 32px; }%%00010.header2 { font-weight: bold; font-size: 24px; }%%00010 .qiHOT { color : #D43D46; } %%00010  .qiWARMTH { color : #E2B0B9; } %%00010  .qiFAIR { color : #BEE2B6; } %%00010  .qiCOOLNESS { color : #AFCFD7; } %%00010  .qiCOLD { color : #89AAC8; } %%00010  .flavorPUNGENCY { color : #CA002A; } %%00010 .flavorSWEETNESS { color : #F4A582; } %%00010 .flavorSOURNESS { color : #A6D96A; } %%00010 .flavorBITTERNESS { color : #404040; } %%00010 .flavorSALTINESS { color : #BABABA; } %%00010 .meridianLIVER { color : #8DD3C7; } %%00010 .meridianHEART { color : #FFFFB3; } %%00010 .meridianSPLEEN { color : #BEBADA; } %%00010 .meridianLUNG { color : #FB8072; } %%00010 .meridianKINDEY { color : #80B1D3; } %%00010 .meridianGB { color : #FDB462; } %%00010 .meridianSI { color : #B3DE69; } %%00010 .meridianLI { color : #FCCDE5; } %%00010 .meridianST { color : #D9D9D9; } %%00010 .meridianUB { color : #BC80BD; } %%00010 .meridianPERI { color : #CCEBC5; } %%00010 .meridianTE { color : #FFED6F; } %%00010 .ACNE__bacteria { color : #A6CEE3; } %%00010 .ACNE__hormone { color : #1F78B4; } %%00010 .ACNE__infection { color : #B2DF8A; } %%00010 .ACNE__inflammation { color : #33A02C; } %%00010 .ACNE__mood { color : #FB9A99; } %%00010 .ACNE__skin_whitening { color : #E31A1C; } %%00010"/>
</config>
</config>
<config key="internal_node_subsettings">
<entry key="memory_policy" type="xstring" value="CacheSmallInMemory"/>
</config>
<config key="model">
<entry key="sourceCode" type="xstring" value="%%00010import json%%00010import os%%00010import io%%00010import requests%%00010import numpy as np%%00010import networkx as nx%%00010from py2cytoscape.data.cyrest_client import CyRestClient%%00010from py2cytoscape.data.style_client import StyleClient as CyStyleClient%%00010from py2cytoscape.data.style import StyleUtil%%00010from py2cytoscape.util import util_networkx as UtilNx%%00010from pandas import DataFrame%%00010from collections import OrderedDict%%00010import urllib%%00010%%00010checkmissing=lambda x: 0 if np.isnan(x) or x&lt;0 else x%%00010%%00010style1=OrderedDict((%%00010           (&quot;qiHOT&quot;,[&quot;#D43D46&quot;,u&quot;熱&quot;,0]),%%00010           (&quot;qiWARMTH&quot;,[&quot;#E2B0B9&quot;, u&quot;溫&quot;,0]),%%00010           (&quot;qiFAIR&quot;,[&quot;#BEE2B6&quot;,u&quot;平&quot;,0]), %%00010           (&quot;qiCOOLNESS&quot;,[&quot;#AFCFD7&quot;,u&quot;涼&quot;,0]),%%00010           (&quot;qiCOLD&quot;,[&quot;#89AAC8&quot;, u&quot;寒&quot;,0])%%00010       ))%%00010style2=OrderedDict((%%00010            (&quot;flavorPUNGENCY&quot;,[&quot;#CA002A&quot;,u&quot;辛&quot;,0]),%%00010            (&quot;flavorSWEETNESS&quot;,[&quot;#F4A582&quot;,u&quot;甘&quot;,0]),%%00010            (&quot;flavorSOURNESS&quot;,[&quot;#A6D96A&quot;,u&quot;酸&quot;,0]),%%00010            (&quot;flavorBITTERNESS&quot;,[&quot;#404040&quot;,u&quot;苦&quot;,0]),%%00010            (&quot;flavorSALTINESS&quot;,[&quot;#BABABA&quot;,u&quot;鹹&quot;,0])%%00010       ))%%00010style3=OrderedDict((%%00010            (&quot;meridianLIVER&quot;,[&quot;#8DD3C7&quot;,u&quot;肝&quot;,0]),%%00010            (&quot;meridianHEART&quot;,[&quot;#FFFFB3&quot;,u&quot;心&quot;,0]),%%00010            (&quot;meridianSPLEEN&quot;,[&quot;#BEBADA&quot;,u&quot;脾&quot;,0]), %%00010            (&quot;meridianLUNG&quot;,[&quot;#FB8072&quot;,u&quot;肺&quot;,0]), %%00010            (&quot;meridianKINDEY&quot;,[&quot;#80B1D3&quot;,u&quot;腎&quot;,0]),%%00010            (&quot;meridianGB&quot;,[&quot;#FDB462&quot;, u&quot;膽&quot;,0]), %%00010            (&quot;meridianSI&quot;,[&quot;#B3DE69&quot;,u&quot;小腸&quot;,0]), %%00010            (&quot;meridianLI&quot;,[&quot;#FCCDE5&quot;,u&quot;大腸&quot;,0]), %%00010            (&quot;meridianST&quot;,[&quot;#D9D9D9&quot;,u&quot;胃&quot;,0]),%%00010            (&quot;meridianUB&quot;,[&quot;#BC80BD&quot;, u&quot;膀胱&quot;,0]),%%00010            (&quot;meridianPERI&quot;,[&quot;#CCEBC5&quot;, u&quot;心包&quot;,0]),%%00010            (&quot;meridianTE&quot;,[&quot;#FFED6F&quot;,u&quot;三焦&quot;,0])%%00010%%00009%%00009))%%00010%%00010#製作 style 4 -&gt; pubmed 查詢 -&gt; 活性作用機轉%%00010%%00010brewerColorList=[%%00010  &quot;#A6CEE3&quot;,&quot;#1F78B4&quot;,&quot;#B2DF8A&quot;,&quot;#33A02C&quot;,&quot;#FB9A99&quot;,&quot;#E31A1C&quot;,&quot;#FDBF6F&quot;,&quot;#FF7F00&quot;,&quot;#CAB2D6&quot;,&quot;#6A3D9A&quot;,&quot;#FFFF99&quot;,&quot;#B15928&quot;,%%00010  &quot;#8DD3C7&quot;,&quot;#FFFFB3&quot;,&quot;#BEBADA&quot;,&quot;#FB8072&quot;,&quot;#80B1D3&quot;,&quot;#FDB462&quot;,&quot;#B3DE69&quot;,&quot;#FCCDE5&quot;,&quot;#D9D9D9&quot;,&quot;#BC80BD&quot;,&quot;#CCEBC5&quot;,&quot;#FFED6F&quot;]%%00010%%00010style4=OrderedDict()%%00010for col in sorted(list(input_table_2)):%%00010    if flow_variables['task_name'].upper().strip(&quot; \t&quot;&quot;&quot;).replace(&quot; &quot;,&quot;_&quot;) in col:%%00010        pathway=col.split(&quot;__&quot;)[1]%%00010        style4[col]=[brewerColorList.pop(0), pathway.replace(&quot;_&quot;,&quot; &quot;) , 0]%%00010%%00010         %%00010networkG=nx.Graph()%%00010n=0%%00010e=0%%00010colDict={}%%00010%%00010#add NODE first (input_table_2)%%00010for node in input_table_2.itertuples():%%00010    attrs={ 'id' : getattr(node, 'id'),%%00010                        'name' : getattr(node, 'id'), %%00010                        'nodeLabel': getattr(node, 'nodeLabel'),%%00010                        'nodeSupport': getattr(node, 'nodeSupport'), %%00010                        'nodeSupportPercent': getattr(node, 'nodeSupportPercent'), %%00010                        'myGroup'    : getattr(node, 'myGroup'),%%00010                        'theSearchTerm1' : getattr(node, 'theSearchTerm1'),%%00010                        'theSearchTerm2' : getattr(node, 'theSearchTerm2'),%%00010                        'qiHOT' :  checkmissing(float(getattr(node, 'qiHOT'))),%%00010                        'qiWARMTH' :  checkmissing(float(getattr(node, 'qiWARMTH'))),%%00010                        'qiFAIR' :   checkmissing(float(getattr(node, 'qiFAIR'))),%%00010                        'qiCOOLNESS' :   checkmissing(float(getattr(node, 'qiCOOLNESS'))),%%00010                        'qiCOLD' :   checkmissing(float(getattr(node, 'qiCOLD'))),%%00010                        'flavorPUNGENCY' :   checkmissing(float(getattr(node, 'flavorPUNGENCY'))),%%00010                        'flavorSWEETNESS' :   checkmissing(float(getattr(node, 'flavorSWEETNESS'))),%%00010                        'flavorSOURNESS' :   checkmissing(float(getattr(node, 'flavorSOURNESS'))),%%00010                        'flavorBITTERNESS' :  checkmissing(float(getattr(node, 'flavorBITTERNESS'))),%%00010                        'flavorSALTINESS' :   checkmissing(float(getattr(node, 'flavorSALTINESS'))),%%00010                        'meridianLIVER' :   checkmissing(float(getattr(node, 'meridianLIVER'))),%%00010                        'meridianHEART' :   checkmissing(float(getattr(node, 'meridianHEART'))),%%00010                        'meridianSPLEEN' :   checkmissing(float(getattr(node, 'meridianSPLEEN'))),%%00010                        'meridianLUNG' :   checkmissing(float(getattr(node, 'meridianLUNG'))),%%00010                        'meridianKINDEY' :   checkmissing(float(getattr(node, 'meridianKINDEY'))),%%00010                        'meridianGB' :   checkmissing(float(getattr(node, 'meridianGB'))),%%00010                        'meridianSI' :   checkmissing(float(getattr(node, 'meridianSI'))),%%00010                        'meridianLI' :   checkmissing(float(getattr(node, 'meridianLI'))),%%00010                        'meridianST' :   checkmissing(float(getattr(node, 'meridianST'))),%%00010                        'meridianUB' :   checkmissing(float(getattr(node, 'meridianUB'))),%%00010                        'meridianPERI' :   checkmissing(float(getattr(node, 'meridianPERI'))),%%00010                        'meridianTE': checkmissing(float(getattr(node, 'meridianTE')))%%00010                        }%%00010    tooltip=u' '%%00010    tmpT=[]%%00010    for col in style1.keys():  #5氣%%00010        if attrs[col] &gt; 0:%%00010            tmpT.append(style1[col][1])%%00010            style1[col][2]+=1%%00010    if len(tmpT) &gt; 0 :%%00010        tooltip=tooltip + u' 氣(' + u','.join(tmpT) + u')'%%00010    tmpT=[]%%00010    for col in style2.keys():  #5味%%00010        if attrs[col] &gt; 0:%%00010            tmpT.append(style2[col][1])%%00010            style2[col][2]+=1%%00010    if len(tmpT) &gt; 0 :%%00010        tooltip=tooltip + u&quot; 味(&quot; + u&quot;,&quot;.join(tmpT) + &quot;)&quot;%%00010    tmpT=[]%%00010    for col in style3.keys():  #12經絡%%00010        if attrs[col] &gt; 0:%%00010            tmpT.append(style3[col][1])%%00010            style3[col][2]+=1            %%00010    if len(tmpT) &gt; 0 :%%00010        tooltip=tooltip + u&quot; 經絡(&quot; + u&quot;,&quot;.join(tmpT) + &quot;)&quot;    %%00010    tmpT=[] %%00010    for col in style4.keys():   #作用機轉%%00010        attrs[col]=checkmissing(getattr(node, col))%%00010        if attrs[col] &gt; 0:%%00010            tmpT.append(style4[col][1])%%00010            style4[col][2]+=1%%00010    if len(tmpT) &gt; 0 :%%00010        tooltip=tooltip + u&quot; 作用(&quot; + &quot;,&quot;.join(tmpT) + &quot;)&quot;    %%00010    #--&gt; ok%%00010    attrs[u'tooltip']=tooltip%%00010    networkG.add_node(getattr(node, 'id'), attrs)%%00010    n+=1%%00010%%00010#add EDGE first (input_table_1)%%00010for edge in input_table_1.itertuples():%%00010    networkG.add_edge(getattr(edge, 'source'),%%00010                      getattr(edge, 'target'),%%00010                      { 'Lift' : float(getattr(edge, 'itemsetLift'))%%00010                      })%%00010    e+=1%%00010%%00010print(&quot;Number of node: {0}, Number of edge: {1} &quot;.format(n, e))%%00010%%00010IP=&quot;127.0.0.1&quot;%%00010PORT_NUMBER = 1234%%00010%%00010network_name=&quot;Support={0}%, Confidence={1}%&quot;.format(flow_variables['current_Support'],flow_variables['current_minConfidence'])%%00010collection_name=flow_variables['task_name']%%00010%%00010cy=CyRestClient(IP, PORT_NUMBER)%%00010cynx=cy.network.create_from_networkx(networkG, name=network_name, collection=collection_name)%%00010SUID=cynx.get_id()%%00010%%00010cy.layout.apply(name='force-directed-cl', network=cynx)%%00010#res=requests.get(&quot;http://{0}:{1}/v1/apply/styles/{2}/{3}&quot;.format(IP, PORT_NUMBER, 'TCM_Style_Detail', SUID))%%00010%%00010print(&quot;Collection: {0} &quot;.format(collection_name))%%00010print(&quot;SUID: {0} &quot;.format(SUID))%%00010print(network_name)%%00010#print(&quot;res: &quot;+&quot;http://{0}:{1}/v1/apply/styles/{2}/{3}&quot;.format(IP, PORT_NUMBER, 'TCM_Style_Detail', SUID))%%00010%%00010with io.open(os.path.join(flow_variables['config_local_output_fullpath'] , %%00010                          collection_name+ &quot;_&quot; + network_name +&quot;.cyjs&quot;), 'w', encoding='utf8') as json_file:%%00010    data = json.dumps(UtilNx.from_networkx(networkG), ensure_ascii=False)%%00010    json_file.write(unicode(data))%%00010%%00010%%00010defaults = {    %%00010%%00009%%00009%%00009%%00009&quot;NETWORK_TITLE&quot; : collection_name + &quot;(&quot; + network_name + &quot;)&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_SCALE_FACTOR&quot; :&quot;1.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_EDGE_SELECTION&quot; :&quot;true&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_DEPTH&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_WIDTH&quot; :&quot;1024.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_BACKGROUND_PAINT&quot; :&quot;#FFFFFF&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_HEIGHT&quot; :&quot;768.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_NODE_SELECTION&quot; :&quot;true&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_CENTER_X_LOCATION&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_CENTER_Y_LOCATION&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NETWORK_CENTER_Z_LOCATION&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009#----------NODE,%%00010%%00009%%00009%%00009%%00009&quot;NODE_SELECTED_PAINT&quot; :&quot;#FFFF00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_LABEL_POSITION&quot; :&quot;C,C,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_LABEL_FONT_FACE&quot; :&quot;微軟正黑體,plain,12&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_LABEL_TRANSPARENCY&quot; :&quot;255&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_LABEL_FONT_SIZE&quot; :&quot;16&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_LABEL_WIDTH&quot; :&quot;200.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_LABEL_COLOR&quot; :&quot;#000000&quot;,%%00010%%00009%%00009%%00009%%00009&quot;COMPOUND_NODE_PADDING&quot; :&quot;10.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_FILL_COLOR&quot; :&quot;#97675C&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_BORDER_PAINT&quot; :&quot;#000000&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_BORDER_TRANSPARENCY&quot; :&quot;255&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_BORDER_WIDTH&quot; :&quot;2.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_WIDTH&quot; :&quot;40.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_DEPTH&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_X_LOCATION&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_Y_LOCATION&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_Z_LOCATION&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_VISIBLE&quot; :&quot;true&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_TRANSPARENCY&quot; :&quot;255&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_SHAPE&quot; :&quot;ELLIPSE&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_SELECTED&quot; :&quot;false&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_TOOLTIP&quot; :&quot;===&gt;&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_NESTED_NETWORK_IMAGE_VISIBLE&quot; :&quot;true&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_BORDER_STROKE&quot; :&quot;SOLID&quot;,%%00010                &quot;COMPOUND_NODE_SHAPE&quot; :&quot;ROUND_RECTANGLE&quot;,%%00010%%00009%%00009%%00009%%00009#-----------CUSTOM graphics,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_1&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_2&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_3&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_4&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_5&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_6&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_7&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_8&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_SIZE_9&quot; :&quot;0.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_1&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_2&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_3&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_4&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_5&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_6&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_7&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_8&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_9&quot; :&quot;org.cytoscape.ding.customgraphics.NullCustomGraphics,0,[ Remove Graphics ],&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_1&quot; :&quot;SW,NE,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_2&quot; :&quot;S,N,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_3&quot; :&quot;SE,NW,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_4&quot; :&quot;NE,S,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_5&quot; :&quot;C,C,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_6&quot; :&quot;C,C,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_7&quot; :&quot;C,C,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_8&quot; :&quot;C,C,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;NODE_CUSTOMGRAPHICS_POSITION_9&quot; :&quot;C,C,c,0.00,0.00&quot;,%%00010%%00009%%00009%%00009%%00009#------------EDGE%%00010%%00009%%00009%%00009%%00009&quot;EDGE_TOOLTIP&quot; :&quot;&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LINE_TYPE&quot; :&quot;DOT&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_CURVED&quot; :&quot;true&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_TARGET_ARROW_UNSELECTED_PAINT&quot; :&quot;#000000&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LABEL&quot; :&quot;&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_TRANSPARENCY&quot; :&quot;255&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_STROKE_SELECTED_PAINT&quot; :&quot;#FF0000&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_STROKE_UNSELECTED_PAINT&quot; :&quot;#969696&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_VISIBLE&quot; :&quot;true&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_SOURCE_ARROW_SELECTED_PAINT&quot; :&quot;#FFFF00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_SELECTED&quot; :&quot;false&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_SOURCE_ARROW_SHAPE&quot; :&quot;NONE&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_SOURCE_ARROW_UNSELECTED_PAINT&quot; :&quot;#000000&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LABEL_FONT_SIZE&quot; :&quot;10&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_TARGET_ARROW_SHAPE&quot; :&quot;NONE&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LABEL_COLOR&quot; :&quot;#000000&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_TARGET_ARROW_SELECTED_PAINT&quot; :&quot;#FFFF00&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LABEL_WIDTH&quot; :&quot;200.0&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LABEL_FONT_FACE&quot; :&quot;SansSerif.plain,plain,10&quot;,%%00010%%00009%%00009%%00009%%00009&quot;EDGE_LABEL_TRANSPARENCY&quot; :&quot;255&quot;%%00010}%%00010node_color_pair = {%%00010    'G0' :  '#E584C7',    'G1' :  '#D73B3A',%%00010    'G2' :  '#B6CCE9',    'G3' :  '#41A940',%%00010    'G4' :  '#F7BDD5',    'G5' :  '#FFC284',%%00010    'G6' :  '#858584',    'G7' :  '#CAB8D8',%%00010    'G8' :  '#A7DDE6',    'G9' :  '#712424',%%00010    'G10' :  '#3D9E3C',    'G11' :  '#9E76C2',%%00010    'G12' :  '#2EC4D2',    'G13' :  '#A2E294',%%00010    'G14' :  '#CECECD',    'G15' :  '#3584BA',%%00010    'G16' :  '#225C22',    'G17' :  '#97675C',%%00010    'G18' :  '#FF8C25',    'G19' :  '#A3E395',%%00010    'G20' :  '#CAA69D'%%00010    }%%00010%%00010%%00010#---------------------------------------------------------&lt;TCM_style_BASIC&gt;%%00010my_TCM_style = cy.style.create('TCM_style_Base')%%00010my_TCM_style.update_defaults(defaults)%%00010%%00010my_TCM_style.create_passthrough_mapping(column='nodeLabel', col_type=&quot;String&quot;, vp=&quot;NODE_LABEL&quot;)%%00010my_TCM_style.create_passthrough_mapping(column='tooltip', col_type=&quot;String&quot;, vp=&quot;NODE_TOOLTIP&quot;)%%00010#myGROUP%%00010my_TCM_style.create_discrete_mapping(column='myGroup', col_type='String', vp='NODE_FILL_COLOR',%%00010                                     mappings=node_color_pair)%%00010#依照實際數據範圍設定比例尺%%00010colNodeSupportPercent=cynx.get_node_column('nodeSupportPercent')%%00010scale_to_node_size=StyleUtil.create_slope(colNodeSupportPercent.min(), colNodeSupportPercent.max(), values=(30,60))%%00010scale_to_font_size=StyleUtil.create_slope(colNodeSupportPercent.min(), colNodeSupportPercent.max(), values=(12,20))%%00010colEdgeLift=cynx.get_edge_column('Lift')%%00010scale_to_edge_width=StyleUtil.create_slope(colEdgeLift.min(), colEdgeLift.max(), values=(1,12))%%00010scale_to_edge_transparent=StyleUtil.create_slope(colEdgeLift.min(), colEdgeLift.max(), values=(128,255))%%00010#NODE SIZE%%00010my_TCM_style.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_SIZE',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010my_TCM_style.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_WIDTH',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010my_TCM_style.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_HEIGHT',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010#FONT%%00010my_TCM_style.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_LABEL_FONT_SIZE',%%00010                                       col_type='Double', points=scale_to_font_size)%%00010#EDGE%%00010my_TCM_style.create_continuous_mapping(column='Lift', vp='EDGE_WIDTH',%%00010                                       col_type='Double', points=scale_to_edge_width)    %%00010my_TCM_style.create_continuous_mapping(column='Lift', vp='EDGE_TRANSPARENCY',%%00010                                       col_type='Double', points=scale_to_edge_transparent)    %%00010# extra information%%00010# style4%%00010style4_info={&quot;NODE_CUSTOMGRAPHICS_4&quot; : 'empty'}%%00010dataColumn=[]%%00010colorColumn=[]%%00010pubmed_max_count=0%%00010if len(style4.keys())&gt;0:%%00010    for c, v in style4.iteritems():%%00010        dataColumn.append('&quot;'+c+'&quot;')%%00010        colorColumn.append('&quot;'+v[0]+'&quot;')%%00010        if pubmed_max_count &lt; v[2]:%%00010            pubmed_max_count=v[2]%%00010    dataString=&quot;,&quot;.join(dataColumn)%%00010    colorString=&quot;,&quot;.join(colorColumn)%%00010    style4_info={&quot;NODE_CUSTOMGRAPHICS_4&quot; : %%00010    'org.cytoscape.BarChart:{&quot;cy_range&quot;:[0,'+'{:f}'.format(pubmed_max_count)+'],&quot;cy_globalRange&quot;:false,&quot;cy_colorScheme&quot;:&quot;CUSTOM&quot;,&quot;cy_colors&quot;:['+colorString+'],&quot;cy_dataColumns&quot;:['+dataString+']}'%%00010    }%%00010    my_TCM_style.update_defaults(style4_info)   #BASE 包含 Pubmed_info%%00010#---------------------------------------------------------&lt;TCM_style_Qi&gt; %%00010#                                                         直接複製此虛線內容即可得到Base圖形%%00010#                                                         取新 styleName                                               %%00010my_TCM_style_Qi = cy.style.create(name='TCM_style_Qi', original_style=my_TCM_style)%%00010my_TCM_style_Qi.update_defaults(defaults)%%00010%%00010my_TCM_style_Qi.create_passthrough_mapping(column='nodeLabel', col_type=&quot;String&quot;, vp=&quot;NODE_LABEL&quot;)%%00010my_TCM_style_Qi.create_passthrough_mapping(column='tooltip', col_type=&quot;String&quot;, vp=&quot;NODE_TOOLTIP&quot;)%%00010#myGROUP%%00010my_TCM_style_Qi.create_discrete_mapping(column='myGroup', col_type='String', vp='NODE_FILL_COLOR',%%00010                                     mappings=node_color_pair)%%00010#%%00010#NODE SIZE%%00010my_TCM_style_Qi.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_SIZE',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010my_TCM_style_Qi.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_WIDTH',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010my_TCM_style_Qi.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_HEIGHT',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010#FONT%%00010my_TCM_style_Qi.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_LABEL_FONT_SIZE',%%00010                                       col_type='Double', points=scale_to_font_size)%%00010#edge Lift%%00010my_TCM_style_Qi.create_continuous_mapping(column='Lift', vp='EDGE_WIDTH',%%00010                                       col_type='Double', points=scale_to_edge_width)    %%00010my_TCM_style_Qi.create_continuous_mapping(column='Lift', vp='EDGE_TRANSPARENCY',%%00010                                       col_type='Double', points=scale_to_edge_transparent)      %%00010#----------&gt; 新增 CUSTOMGRAPHICS_1%%00010# style1%%00010style1_info={&quot;NODE_CUSTOMGRAPHICS_1&quot; : 'empty'}%%00010dataColumn=[]%%00010colorColumn=[]%%00010for c, v in style1.iteritems():%%00010    dataColumn.append('&quot;'+c+'&quot;')%%00010    colorColumn.append('&quot;'+v[0]+'&quot;')%%00010dataString=&quot;,&quot;.join(dataColumn)%%00010colorString=&quot;,&quot;.join(colorColumn)%%00010style1_info={&quot;NODE_CUSTOMGRAPHICS_1&quot; : %%00010  'org.cytoscape.RingChart:{&quot;cy_colorScheme&quot;:&quot;CUSTOM&quot;,&quot;cy_colors&quot;:[' +colorString+'],&quot;cy_dataColumns&quot;:['+dataString+'],&quot;cy_itemLabelFontSize&quot;:10,&quot;cy_showItemLabels&quot;:false}'%%00010}%%00010my_TCM_style_Qi.update_defaults(style1_info)   #BASE 包含 Pubmed_info%%00010%%00010if len(style4.keys())&gt;0:%%00010    my_TCM_style_Qi.update_defaults(style4_info)%%00010#---------------------------------------------------------&lt;TCM_style_Detail&gt;%%00010my_TCM_style_D = cy.style.create('TCM_style_Detail')%%00010my_TCM_style_D.update_defaults(defaults)%%00010%%00010my_TCM_style_D.create_passthrough_mapping(column='nodeLabel', col_type=&quot;String&quot;, vp=&quot;NODE_LABEL&quot;)%%00010my_TCM_style_D.create_passthrough_mapping(column='tooltip', col_type=&quot;String&quot;, vp=&quot;NODE_TOOLTIP&quot;)%%00010#myGROUP%%00010my_TCM_style_D.create_discrete_mapping(column='myGroup', col_type='String', vp='NODE_FILL_COLOR',%%00010                                     mappings=node_color_pair)%%00010#%%00010#NODE SIZE%%00010my_TCM_style_D.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_SIZE',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010my_TCM_style_D.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_WIDTH',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010my_TCM_style_D.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_HEIGHT',%%00010                                       col_type='Double', points=scale_to_node_size)%%00010#FONT%%00010my_TCM_style_D.create_continuous_mapping(column='nodeSupportPercent', vp='NODE_LABEL_FONT_SIZE',%%00010                                       col_type='Double', points=scale_to_font_size)%%00010#edge Lift%%00010my_TCM_style_D.create_continuous_mapping(column='Lift', vp='EDGE_WIDTH',%%00010                                       col_type='Double', points=scale_to_edge_width)    %%00010my_TCM_style_D.create_continuous_mapping(column='Lift', vp='EDGE_TRANSPARENCY',%%00010                                       col_type='Double', points=scale_to_edge_transparent)  %%00010#----------&gt; 新增 CUSTOMGRAPHICS_1,2,3%%00010%%00010#---&gt; style2%%00010style2_info={&quot;NODE_CUSTOMGRAPHICS_2&quot; : 'empty'}%%00010dataColumn=[]%%00010colorColumn=[]%%00010for c, v in style2.iteritems():%%00010    dataColumn.append('&quot;'+c+'&quot;')%%00010    colorColumn.append('&quot;'+v[0]+'&quot;')%%00010dataString=&quot;,&quot;.join(dataColumn)%%00010colorString=&quot;,&quot;.join(colorColumn)%%00010style2_info={&quot;NODE_CUSTOMGRAPHICS_2&quot; : %%00010  'org.cytoscape.RingChart:{&quot;cy_range&quot;:[0.0,1.0],&quot;cy_globalRange&quot;:false,&quot;cy_holeSize&quot;:0.5,&quot;cy_colorScheme&quot;:&quot;CUSTOM&quot;,&quot;cy_colors&quot;:[' +colorString+'],&quot;cy_dataColumns&quot;:['+dataString+'],&quot;cy_itemLabelFontSize&quot;:10,&quot;cy_showItemLabels&quot;:false}'%%00010}%%00010#---&gt; style3%%00010style3_info={&quot;NODE_CUSTOMGRAPHICS_3&quot; : 'empty'}%%00010dataColumn=[]%%00010colorColumn=[]%%00010for c, v in style3.iteritems():%%00010    dataColumn.append('&quot;'+c+'&quot;')%%00010    colorColumn.append('&quot;'+v[0]+'&quot;')%%00010dataString=&quot;,&quot;.join(dataColumn)%%00010colorString=&quot;,&quot;.join(colorColumn)%%00010style3_info={&quot;NODE_CUSTOMGRAPHICS_3&quot; : %%00010  'org.cytoscape.BarChart:{&quot;cy_range&quot;:[0.0,1.0],&quot;cy_autoRange&quot;:false,&quot;cy_colorScheme&quot;:&quot;CUSTOM&quot;,&quot;cy_colors&quot;:[' +colorString+'],&quot;cy_dataColumns&quot;:['+dataString+']}'%%00010}%%00010%%00010%%00010my_TCM_style_D.update_defaults(style1_info)   #BASE 包含 Pubmed_info%%00010my_TCM_style_D.update_defaults(style2_info)%%00010my_TCM_style_D.update_defaults(style3_info)%%00010if len(style4.keys())&gt;0:%%00010    my_TCM_style_D.update_defaults(style4_info)%%00010#------------------------------------------------------------------------------------%%00010%%00010cy.style.apply(style=my_TCM_style, network=cynx)             #------------Cytoscape 網路處理完畢%%00010%%00010print &quot;--- cytoscape --- ok ----&quot;%%00010#--------------- 輸出 graphspace ------------------------%%00010from graphspace_python.api.client import GraphSpace%%00010from graphspace_python.graphs.classes.gsgraph import GSGraph%%00010%%00010G = GSGraph()%%00010for ndx, node in networkG.nodes_iter(data=True):%%00010    node_attr_dict={ 'data' : {   'nodeSupportPercent': float(node['nodeSupportPercent']), %%00010                                  'myGroup'           : node['myGroup']%%00010                          } }%%00010    G.add_node( int(node['id']), popup= node['tooltip'], label=node['nodeLabel'], attr_dict=node_attr_dict)%%00010for edge in networkG.edges_iter(data=True):%%00010    edge_attr_dict={ 'data' : {   'Lift': float(edge[2]['Lift']) } } %%00010    G.add_edge( int(edge[0]), int(edge[1]), directed=False, attr_dict=edge_attr_dict)%%00010%%00010minSupportP=&quot;{0:.4f}&quot;.format(colNodeSupportPercent.min())%%00010maxSupportP=&quot;{0:.4f}&quot;.format(colNodeSupportPercent.max())%%00010minLift=&quot;{0:.4f}&quot;.format(colEdgeLift.min())%%00010maxLift=&quot;{0:.4f}&quot;.format(colEdgeLift.max())%%00010%%00010styleObj={'style': [%%00010%%00009%%00009%%00009{'css': {'text-opacity': 1.0, 'font-size': 16.0, 'font-weight': 'normal', 'width': 50.0, 'border-color': 'rgb(0,0,0)', 'background-opacity': 1.0, 'border-width': 2.0, 'height': 50.0, 'color': 'rgb(0,0,0)', 'shape': 'ellipse', 'border-opacity': 1.0, 'content': 'data(label)', 'text-halign': 'center', 'font-family': u'微軟正黑體', 'text-valign': 'center', 'background-color': 'rgb(151,103,92)'}, 'selector': 'node'},%%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(255,255,0)'}, 'selector': 'node:selected'}, %%00010%%00009%%00009%%00009{'css': {'opacity': 1.0, 'source-arrow-shape': 'none', 'font-size': 10.0, 'font-weight': 'normal', 'target-arrow-shape': 'none', 'text-opacity': 1.0, 'color': 'rgb(0,0,0)', 'source-arrow-color': 'rgb(0,0,0)', 'line-color': 'rgb(150,150,150)', 'content': '', 'width': 1.0, 'line-style': 'dotted', 'font-family': 'SansSerif.plain', 'target-arrow-color': 'rgb(0,0,0)'}, 'selector': 'edge'}, %%00010%%00009%%00009%%00009{'css': {'line-color': 'rgb(255,0,0)'}, 'selector': 'edge:selected'}, %%00010%%00009%%00009%%00009# size-width%%00010%%00009%%00009%%00009{'css': {'width': 80.0}, 'selector': 'node[nodeSupportPercent &gt; {0}]'.format(maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'width': 80.0}, 'selector': 'node[nodeSupportPercent = {0}]'.format(maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'width': 'mapData(nodeSupportPercent,{0},{1},40.0,80.0)'.format(minSupportP, maxSupportP)   }, %%00010%%00009%%00009%%00009 'selector':  'node[nodeSupportPercent &gt; {0}][nodeSupportPercent &lt; {1}]'.format(minSupportP, maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'width': 40.0}, 'selector': 'node[nodeSupportPercent = {0}]'.format(minSupportP)}, %%00010%%00009%%00009%%00009{'css': {'width': 40.0}, 'selector': 'node[nodeSupportPercent &lt; {0}]'.format(minSupportP)},%%00010%%00009%%00009%%00009# size-height%%00010%%00009%%00009%%00009{'css': {'height': 80.0}, 'selector': 'node[nodeSupportPercent &gt; {0}]'.format(maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'height': 80.0}, 'selector': 'node[nodeSupportPercent = {0}]'.format(maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'height': 'mapData(nodeSupportPercent,{0},{1},40.0,80.0)'.format(minSupportP, maxSupportP)   }, %%00010%%00009%%00009%%00009 'selector': 'node[nodeSupportPercent &gt; {0}][nodeSupportPercent &lt; {1}]'.format(minSupportP, maxSupportP)   }, %%00010%%00009%%00009%%00009{'css': {'height': 40.0}, 'selector': 'node[nodeSupportPercent = {0} ]'.format(minSupportP)}, %%00010%%00009%%00009%%00009{'css': {'height': 40.0}, 'selector': 'node[nodeSupportPercent &lt; {0}]'.format(minSupportP)}, %%00010%%00009%%00009%%00009# myGroup %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(202,166,157)'}, 'selector': &quot;node[myGroup = 'G20']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(158,118,194)'}, 'selector': &quot;node[myGroup = 'G11']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(61,158,60)'}, 'selector': &quot;node[myGroup = 'G10']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(162,226,148)'}, 'selector': &quot;node[myGroup = 'G13']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(229,132,199)'}, 'selector': &quot;node[myGroup = 'G0']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(46,196,210)'}, 'selector': &quot;node[myGroup = 'G12']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(215,59,58)'}, 'selector': &quot;node[myGroup = 'G1']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(53,132,186)'}, 'selector': &quot;node[myGroup = 'G15']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(182,204,233)'}, 'selector': &quot;node[myGroup = 'G2']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(206,206,205)'}, 'selector': &quot;node[myGroup = 'G14']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(65,169,64)'}, 'selector': &quot;node[myGroup = 'G3']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(151,103,92)'}, 'selector': &quot;node[myGroup = 'G17']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(247,189,213)'}, 'selector': &quot;node[myGroup = 'G4']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(34,92,34)'}, 'selector': &quot;node[myGroup = 'G16']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(255,194,132)'}, 'selector': &quot;node[myGroup = 'G5']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(163,227,149)'}, 'selector': &quot;node[myGroup = 'G19']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(133,133,132)'}, 'selector': &quot;node[myGroup = 'G6']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(255,140,37)'}, 'selector': &quot;node[myGroup = 'G18']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(202,184,216)'}, 'selector': &quot;node[myGroup = 'G7']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(167,221,230)'}, 'selector': &quot;node[myGroup = 'G8']&quot;}, %%00010%%00009%%00009%%00009{'css': {'background-color': 'rgb(113,36,36)'}, 'selector': &quot;node[myGroup = 'G9']&quot;}, %%00010%%00009%%00009%%00009# size-font%%00010%%00009%%00009%%00009{'css': {'font-size': 20.0}, 'selector': 'node[nodeSupportPercent &gt; {0}]'.format(maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'font-size': 20.0}, 'selector': 'node[nodeSupportPercent = {0}]'.format(maxSupportP)}, %%00010%%00009%%00009%%00009{'css': {'font-size': 'mapData(nodeSupportPercent, {0}, {1}, 12, 20)'.format(minSupportP, maxSupportP)   }, %%00010%%00009%%00009%%00009 'selector': 'node[nodeSupportPercent &gt; {0}][nodeSupportPercent &lt; {1}]'.format(minSupportP, maxSupportP)},  %%00010%%00009%%00009%%00009{'css': {'font-size': 12.0}, 'selector': 'node[nodeSupportPercent = {0}]'.format(minSupportP)}, %%00010%%00009%%00009%%00009{'css': {'font-size': 12.0}, 'selector': 'node[nodeSupportPercent &lt; {0}]'.format(minSupportP)}, %%00010%%00009%%00009%%00009# size-Lift%%00010%%00009%%00009%%00009{'css': {'width': 12.0}, 'selector': 'edge[Lift &gt; {0}]'.format(maxLift)}, %%00010%%00009%%00009%%00009{'css': {'width': 12.0}, 'selector': 'edge[Lift = {0}]'.format(maxLift)}, %%00010%%00009%%00009%%00009{'css': {'width': 'mapData(Lift,{0},{1},1.0,12.0)'.format(minLift, maxLift)}, %%00010%%00009%%00009%%00009 'selector': 'edge[Lift &gt; {0}][Lift &lt; {1}]'.format(minLift, maxLift)}, %%00010%%00009%%00009%%00009{'css': {'width': 1.0}, 'selector': 'edge[Lift = {0}]'.format(minLift)}, %%00010%%00009%%00009%%00009{'css': {'width': 1.0}, 'selector': 'edge[Lift &lt; {0}]'.format(minLift)}%%00010            ]}%%00010%%00010# 中文network name 有問題 無法連續 submission @ 2017/7/14%%00010graphspace_network_name = u&quot;{0}_({1})&quot;.format(collection_name, network_name)%%00010G.set_name(graphspace_network_name)%%00010G.set_data(data={ 'description': u&quot;&lt;h1&gt;{0}&lt;/h1&gt;&lt;h2&gt;{1}&lt;/h2&gt;&quot;.format(flow_variables['task_name_Ch'] , graphspace_network_name) })%%00010G.set_tags([flow_variables['task_name'], flow_variables['task_name_Ch']])%%00010G.set_style_json(styleObj)%%00010graphspace = GraphSpace(flow_variables['config_graphspace_id'], flow_variables['config_graphspace_pwd'])%%00010print '-----before submit -- style json ----'%%00010print G.get_style_json()%%00010print '-----before submit -- graph json ----'%%00010print G.get_graph_json()%%00010testG=graphspace.get_graph(name=graphspace_network_name )%%00010if testG is not None:%%00010    print u'-----原有網路已存在%%65292更新既有網路----'%%00010    print graphspace.delete_graph(graphspace_network_name)%%00010    print u'-----既有網路已刪除%%65292重新上傳----'%%00010%%00010print u'-----result of submit----'%%00010print graphspace.post_graph(G, is_public=1)%%00010theG = testG=graphspace.get_graph(name=graphspace_network_name )%%00010GraphspaceNetworkID=''%%00010if theG is not None:%%00010    GraphspaceNetworkID=theG.get('id')%%00010%%00010URLtoGraphspace='http://graphspace.org/graphs/{0}?auto_layout=cose'.format(GraphspaceNetworkID)%%00010QRcode='https://api.qrserver.com/v1/create-qr-code/?data={0}&amp;amp;size=100x100'.format(urllib.quote(URLtoGraphspace))%%00010print QRcode%%00010%%00010#----------開始準備輸出 Legend%%00010%%00010# --- HTML output - style%%00010# ------typeName------itemEn-----itemCh-----fontColor------cnt%%00010stylesheet=&quot;&quot;&quot;%%00010body {font-family: Arial, &quot;文泉驛正黑&quot;, &quot;WenQuanYi Zen Hei&quot;, &quot;儷黑 Pro&quot;, &quot;LiHei Pro&quot;, &quot;微軟正黑體&quot;, &quot;Microsoft JhengHei&quot;, &quot;標楷體&quot;, DFKai-SB, sans-serif;}%%00010.typeName {font-size: 32px;text-align: right;%%00009word-break: font-weight: border;}%%00010.col1 {width: 130px; border-right-width: thick;border-right-color: darkgrey;border-right-style: dotted;text-align: right;vertical-align: middle;}%%00010.col2 {width: auto;display: grid;vertical-align: bottom;}%%00010.legendCircle {font-size: 60px; %%00009line-height: 40px;}%%00010.legendText {font-size: 24px; color: gray;}%%00010.legendBox {font-size: 60px; %%00009line-height: 40px;}%%00010.qrcode { absolute; top: 20 px; right: 20 px; } %%00010.header1 { font-weight: bold; font-size: 32px; }%%00010.header2 { font-weight: bold; font-size: 24px; }%%00010&quot;&quot;&quot;%%00010%%00010legend=[]%%00010for k in style1.keys():%%00010    legend.append([ u'氣', k, style1[k][1], style1[k][0], style1[k][2] ])%%00010    stylesheet = stylesheet + &quot; .{0} {{ color : {1}; }} \n &quot;.format(k, style1[k][0])%%00010for k in style2.keys():%%00010    legend.append([ u'味', k, style2[k][1], style2[k][0], style2[k][2] ])%%00010    stylesheet = stylesheet + &quot; .{0} {{ color : {1}; }} \n&quot;.format(k, style2[k][0])%%00010for k in style3.keys():%%00010    legend.append([ u'經絡', k, style3[k][1], style3[k][0], style3[k][2] ])%%00010    stylesheet = stylesheet + &quot; .{0} {{ color : {1}; }} \n&quot;.format(k, style3[k][0])%%00010for k in style4.keys():%%00010    legend.append([ u'作用機轉', k, style4[k][1], style4[k][0], style4[k][2] ])%%00010    stylesheet = stylesheet + &quot; .{0} {{ color : {1}; }} \n&quot;.format(k, style4[k][0])%%00010%%00010flow_variables['CSS']=stylesheet%%00010%%00010# ---- HTML output 內容%%00010%%00010html = u&quot;&quot;&quot;&lt;table&gt;&lt;tr&gt;%%00010             &lt;td width=80%&gt;&lt;span class=header1&gt;{0} - {1}&lt;/span&gt;&lt;br&gt;&lt;span class=header2&gt;{2}&lt;/span&gt;&lt;/td&gt;%%00010             &lt;td width=20% align=&quot;right&quot;&gt;&lt;a href='{3}'&gt;&lt;img src='{4}' alt='link to graphspace' title='link to graphspace'&gt;&lt;/a&gt;&lt;/td&gt;%%00010             &lt;/tr&gt;&lt;/table&gt;%%00010        &quot;&quot;&quot;.format(flow_variables['task_name_Ch'], flow_variables['task_name'], network_name,%%00010                   URLtoGraphspace, QRcode )%%00010(style1_html, style2_html, style3_html, style4_html)=(u'',u'',u'',u'')%%00010for k in style1.keys():%%00010    style1_html = style1_html + u'&lt;span class=&quot;legendCircle {0}&quot;&gt;&amp;#9679;&lt;/span&gt;&lt;span class=&quot;legendText&quot;&gt;{1}({2})&lt;/span&gt;'.format(k, style1[k][1],style1[k][2])%%00010for k in style2.keys():%%00010    style2_html = style2_html + u'&lt;span class=&quot;legendCircle {0}&quot;&gt;&amp;#9679;&lt;/span&gt;&lt;span class=&quot;legendText&quot;&gt;{1}({2})&lt;/span&gt;'.format(k, style2[k][1],style2[k][2])%%00010for k in style3.keys():%%00010    style3_html = style3_html + u'&lt;span class=&quot;legendBox {0}&quot;&gt;&amp;#9632;&lt;/span&gt;&lt;span class=&quot;legendText&quot;&gt;{1}({2})&lt;/span&gt;'.format(k, style3[k][1],style3[k][2])%%00010for k in style4.keys():%%00010    style4_html = style4_html + u'&lt;span class=&quot;legendBox {0}&quot;&gt;&amp;#9632;&lt;/span&gt;&lt;span class=&quot;legendText&quot;&gt;{1}({2})&lt;/span&gt;'.format(k, style4[k][1],style4[k][2])%%00010%%00010html +=u&quot;&quot;&quot;&lt;table class=table&gt;%%00010           &lt;tr id=style1&gt;&lt;td class=col1&gt;&lt;span class=typeName&gt;氣&lt;/span&gt;&lt;/td&gt;&lt;td id=&quot;style1_legend&quot; class=&quot;col2&quot;&gt;{0}&lt;/td&gt;&lt;/tr&gt;%%00010           &lt;tr id=style2&gt;&lt;td class=col1&gt;&lt;span class=typeName&gt;味&lt;/span&gt;&lt;/td&gt;&lt;td id=&quot;style2_legend&quot; class=&quot;col2&quot;&gt;{1}&lt;/td&gt;&lt;/tr&gt;%%00010           &lt;tr id=style3&gt;&lt;td class=col1&gt;&lt;span class=typeName&gt;經絡&lt;/span&gt;&lt;/td&gt;&lt;td id=&quot;style3_legend&quot; class=&quot;col2&quot;&gt;{2}&lt;/td&gt;&lt;/tr&gt;%%00010           &lt;tr id=style4&gt;&lt;td class=col1&gt;&lt;span class=typeName&gt;作用機轉&lt;/span&gt;&lt;/td&gt;&lt;td id=&quot;style4_legend&quot; class=&quot;col2&quot;&gt;{3}&lt;/td&gt;&lt;/tr&gt;%%00010           &lt;/table&gt;&quot;&quot;&quot;.format(style1_html, style2_html, style3_html, style4_html)%%00010%%00010print &quot;---- html ok -----&quot;%%00010%%00010%%00010#----------------------------------%%00010outputStyleBase=json.dumps(cy.style.get(name='TCM_style_Base', data_format='cy3'))%%00010outputStyleQiOnly=json.dumps(cy.style.get(name='TCM_style_Qi', data_format='cy3'))%%00010outputStyleDetail=json.dumps(cy.style.get(name='TCM_style_Detail', data_format='cy3'))%%00010%%00010output_table_1=DataFrame(%%00010[ { %%00010    'SUID'            : SUID,%%00010    'collection_name' : collection_name,%%00010    'network_name'    : network_name,%%00010    'cyjson'          : data,%%00010    'outputStyleBase'           : outputStyleBase,%%00010    'outputStyleQiOnly'         : outputStyleQiOnly,%%00010    'outputStyleDetail'         : outputStyleDetail,%%00010    'CSS'             : stylesheet,%%00010    'HTML'            : html,%%00010    'legendArray'          : json.dumps(legend, ensure_ascii=False),      %%00010    'styleDictQi'          : json.dumps(style1, ensure_ascii=False),          #五氣%%00010    'styleDictFl'          : json.dumps(style2, ensure_ascii=False),          #5味%%00010    'styleDictMe'          : json.dumps(style3, ensure_ascii=False),          #12經絡%%00010    'styleDictEx'          : json.dumps(style4, ensure_ascii=False),          #extended attributes%%00010    'GraphspaceNetworkID'  : GraphspaceNetworkID,%%00010    'URLtoGraphspace'      : URLtoGraphspace,%%00010    'QRcode'               : QRcode%%00010    } ]%%00010)%%00010%%00010output_table_2=DataFrame(%%00010[ { %%00010    'SUID'            : SUID,%%00010    'collection_name' : collection_name,%%00010    'network_name'    : network_name,%%00010    'cyjson'          : data,%%00010    'outputStyleBase'           : outputStyleBase,%%00010    'outputStyleQiOnly'         : outputStyleQiOnly,%%00010    'outputStyleDetail'         : outputStyleDetail,%%00010    'CSS'             :stylesheet,%%00010    'styleDictQi'          : json.dumps(style1, ensure_ascii=False),          #五氣%%00010    'styleDictFl'          : json.dumps(style2, ensure_ascii=False),          #5味%%00010    'styleDictMe'          : json.dumps(style3, ensure_ascii=False),          #12經絡%%00010    'styleDictEx'          : json.dumps(style4, ensure_ascii=False),          #extended attributes%%00010    } ]%%00010)%%00010%%00010%%00010"/>
<entry key="rowLimit" type="xint" value="1000"/>
</config>
<config key="nodeAnnotation">
<entry key="text" type="xstring" value="[STEP3]%%00013%%00010輸出圖形%%00013%%00010產生cyjs"/>
<entry key="bgcolor" type="xint" value="16777215"/>
<entry key="x-coordinate" type="xint" value="1067"/>
<entry key="y-coordinate" type="xint" value="359"/>
<entry key="width" type="xint" value="106"/>
<entry key="height" type="xint" value="45"/>
<entry key="alignment" type="xstring" value="CENTER"/>
<entry key="borderSize" type="xint" value="0"/>
<entry key="borderColor" type="xint" value="16777215"/>
<entry key="defFontSize" type="xint" value="9"/>
<entry key="annotation-version" type="xint" value="20151123"/>
<config key="styles"/>
</config>
<entry key="customDescription" type="xstring" isnull="true" value=""/>
<entry key="state" type="xstring" value="EXECUTED"/>
<entry key="factory" type="xstring" value="org.knime.python.nodes.script2in2out.PythonScript2In2OutNodeFactory"/>
<entry key="node-name" type="xstring" value="Python Script (2⇒2)"/>
<entry key="node-bundle-name" type="xstring" value="KNIME Python nodes"/>
<entry key="node-bundle-symbolic-name" type="xstring" value="org.knime.python.nodes"/>
<entry key="node-bundle-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-bundle-version" type="xstring" value="3.4.0.v201707041256"/>
<entry key="node-feature-name" type="xstring" value="KNIME Python Integration"/>
<entry key="node-feature-symbolic-name" type="xstring" value="org.knime.features.python.feature.group"/>
<entry key="node-feature-vendor" type="xstring" value="KNIME GmbH, Konstanz, Germany"/>
<entry key="node-feature-version" type="xstring" value="3.4.0.v201707041256"/>
<config key="factory_settings"/>
<entry key="name" type="xstring" value="Python Script (2⇒2)"/>
<entry key="hasContent" type="xboolean" value="true"/>
<entry key="isInactive" type="xboolean" value="false"/>
<config key="ports">
<config key="port_1">
<entry key="index" type="xint" value="1"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 1, Cols: 17"/>
<entry key="port_dir_location" type="xstring" value="port_1"/>
</config>
<config key="port_2">
<entry key="index" type="xint" value="2"/>
<entry key="port_spec_class" type="xstring" value="org.knime.core.data.DataTableSpec"/>
<entry key="port_object_class" type="xstring" value="org.knime.core.node.BufferedDataTable"/>
<entry key="port_object_summary" type="xstring" value="Rows: 1, Cols: 12"/>
<entry key="port_dir_location" type="xstring" value="port_2"/>
</config>
</config>
<config key="filestores">
<entry key="file_store_location" type="xstring" isnull="true" value=""/>
<entry key="file_store_id" type="xstring" isnull="true" value=""/>
</config>
</config>
